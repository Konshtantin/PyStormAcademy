<h2 class='ls-title first'>Способы записи строк</h2>
<p>Строка - это упорядоченная неизменяемая коллекция, которая используется для хранения текстовой информация. Строки записываются в одинарных <span class='line-code'>'</span> или в двойнах кавычках <span class='line-code'>"</span>:</p>
<div class='code'><pre><code class='language-python'>'Вдали виден морской берег' # строка в одинарных кавычках

"Пользователь вошел в аккаунт" # строка в двойных кавычках</code></pre></div>
<p>Обратите внимание, кавычка, которая открывает строку и кавычка которая закрывает должны быть одного вида, такой код вернет ошибку: </p> 
<div class='code'><pre><code class='language-python'>print("Hello World!')</code></pre></div>
<p>Нет разницы, используете вы одинарные или двойные кавычки, но для удобства используйте один вид кавычек для всего кода программы.</p>
<h2 class='ls-title'>Сложение и умножение строк</h2>
<p>В Python операторы <span class='line-code'>+</span> и <span class='line-code'>*</span> используются не только с числами. Оператор <span class='line-code'>+</span> так же используется для конкатенации(сложения) строк:</p>
<div class='code'><pre><code class='language-python'>print("Hello" + " " + "World" + "!") # выведет «Hello World!»

# конкатенация со значением переменной
name = input("Введите имя: ") # допустим, ввели «Tom»

message = "Привет, " + name + ". Как дела?"  

print(message) # выведет «Привет, Tom. Как дела?»</code></pre></div>
<p>А оператор <span class='line-code'>*</span> используется для умножения строк на некоторое целое число:</p>
<div class='code'><pre><code class='language-python'>print("PA." * 5) # выведет «PA.», повторенное 5 раз

# умножение строковых значений переменных
string = input("Введите строку для повторения: ")

n = int(input("Сколько раз повторить? ")) # получаем число, на которое будем умножать строку

print(string * n) # выведет string, повторенное n раз
</code></pre></div>
<h2 class='ls-title'>Длина строки</h2>
<p>Чтобы определить длину строки, в Python есть функция <span class='line-code'>len()</span>, в круглые скобки которой передаем упорядоченную последовательность(<strong>строка</strong> - не единственнная упорядоченная коллекция). Функция <span class='line-code'>len()</span> возвращает число, которое равно колличеству символов в последовательности: </p>
<div class='code'><pre><code class='language-python'>print(len("12345")) # выведет «5»
print(len("Hel" + "lo!")) # выведет 6

data = "Рассвет"
print(len(data)) # выведет 7</code></pre></div>
<h2 class='ls-title'>Перевод в тип данных string</h2>
<p>Любой объект в Python можно преобразовать в строку. Для этого существует функция <span class='line-code'>str()</span>. В круглые скобки передается объект, который нужно перевести в строку: </p>
<div class='code'><pre><code class='language-python'>print(str(10)*3) # выведется не «1000», а «101010», т.к мы умножаем на «3» строку, а не число

print(str([7, 8, 9])) # перевод списка в строку(списки изучим позже, это только пример)
</code></pre></div>
<p>Обработка - строк неотъемлемая часть программирования на Python. Крайне редко приложение, не использует строковые типы данных!</p>