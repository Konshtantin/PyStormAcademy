<h2 class='ls-title first'>Арифметические операции</h2>
<p>Числа в Python поддерживают обычные математические операции:</p>
<h3 class='ls-mini-title'>Сложение</h3>
<p>При сложении целых чисел результатом будет целое число(<span class='line-code'>int</span>):</p>
<div class='code'><pre><code class='language-python'>print(5 + 100) # выведет 105

print(83 + (-84)) # выведет -1

x = 13
x = x + 7 # к «x» прибавили 7 и присвоили результат «x»

print(x) # выведет 20</code></pre></div>
<p>Если хотя бы один из операндов - вещественное число(<span class='line-code'>float</span>), то результатом будет так же вещественное число: </p>
<div class='code'><pre><code class='language-python'>print(1 + 0.0) # выведет 1.0

print(17.0 + (-20.0)) # выведет -3.0</code></pre></div>
<h3 class='ls-mini-title'>Вычитание</h3>
<p>При вычитании так же, если хотя бы один из операндов - вещественное число, то результатом будет вещественное число. Если оба операнда - целые числа, результатом будет целое число:</p>
<div class='code'><pre><code class='language-python'>print(66 - 56.5) # выведет 9.5

print(104 - 94) # выведет 10</code></pre></div>
<h3 class='ls-mini-title'>Умножение</h3>
<p>Для умножения используется оператор <span class='line-code'>*</span>. Правило о типе результата аналогичное:</p>
<div class='code'><pre><code class='language-python'>print(15 * 10.0) # выведет 150.0

print(25 * (-2)) # выведет -50

x = -100
x = x * 0.1 # теперь «x» равен «x» умноженный на 0.1

print(x) # выведет -10.0</code></pre></div>
<h3 class='ls-mini-title'>Деление</h3>
<p>Для деления используется оператор <span class='line-code'>/</span>. При обычном делении результатом <strong>всегда</strong> будет вещественное число:</p>
<div class='code'><pre><code class='language-python'>print(55/11) # выведет 5.0

print(-70.0 / -10.0) # выведет 7.0</code></pre></div>
<p>Если попробуете разделить на <span class='line-code'>0</span>, получите ошибку <span class='line-code'>ZeroDivisionError</span>:</p>
<div class='code'><pre><code class='language-python'>print(1e6 / 0) # выведет ZeroDivisionError: float division by zero</code></pre></div>
<h3 class='ls-mini-title'>Получение целой части от деления</h3>
<p>Чтобы получить целую часть от деления одного числа на другое, используется оператор <span class='line-code'>//</span>. И правило о типе результата такое же, как при сложении, вычитании, умножении:</p>
<div class='code'><pre><code class='language-python'>print(5.0//2) # выведет 2.0, т.к это целая часть от числа 2.5(5/2)
print(10 // 100) # выведет 0, т.к это целая часть от числа 0.1(10/100)

x = 10

x = x // 3 
# теперь «x» равен целой части от деления старого значения «x»(10) на 3

print(x) # выведет 3, т.к столько чисел 3 вмещается в число 10
</code></pre></div>
<p>Этот оператор некорректно работает с отрицательными числами, как и следующий.</p>
<h3 class='ls-mini-title'>Получение остатка от деления</h3>
<p>Чтобы получить остаток от деления одного числа на другое, применяется оператор <span class='line-code'>%</span>. Тип данных результата так же зависит от наличия дробных операндов: </p>
<div class='code'><pre><code class='language-python'>print(10 % 3) # выведет 1, т.к это остаток от деления 10 на 3

print(50.0 % 10) # выведет 0.0, т.к остаток от деления 50 на 10 равен 0</code></pre></div>
<p>Обратите внимание, оператор получения остатка <span class='line-code'>%</span> возвращает <strong>не</strong> дробную часть, а именно остаток!</p>
<h3 class='ls-mini-title'>Возведение в степень</h3>
<p>И последний оператор - оператор возведения в степень <span class='line-code'>**</span>. Левый операнд - число, которое возводим в степень, правый операнд - показатель степени, в который возводим число. Тип данных результата так же зависит от наличия дробных операндов:</p>
<div class='code'><pre><code class='language-python'>print(7**2) # выведет 49(7 в степени 2)

print(20**2.0) # выведет 400.0(20 в степени 2)

x = 3

x = x**3 # теперь «x» равен 27(3 в степени 3)

print(x) # выведет 27</code></pre></div>
<p>Таким же способом можно извлекать корень, помня, например, что квадратный корень из числа <span class='line-code'>x</span> равен этому числу в степени <span class='line-code'>0.5</span>:</p>
<div class='code'><pre><code class='language-python'>print(25**0.5) # выведет 5.0

print(10_000**0.5) # выведет 100.0</code></pre></div>
<p>Но оператор <span class='line-code'>**</span> не всегда дает точный результат, например: </p>
<div class='code'><pre><code class='language-python'>print(-10**2) # выведет -100, хотя должно быть 100, т.к 2 - четное число</code></pre></div>
<p>Поэтому лучше использовать функцию <span class='line-code'>pow()</span>, которая первым аргументом принимает число, возводимое в степень, а вторым аргументом - показатель степени, в который возводим число и возвращает результат возведения:</p>
<div class='code'><pre><code class='language-python'>print(pow(-10, 2)) # выведет 100, как и должно быть
 
print(pow(81, 0.5)) # выведет 9.0</code></pre></div>
<h2 class='ls-title'>Сокращенный вид операций</h2>
<p>Можно заметить, что арифметические операции с переменными многословные. Так, чтобы просто увеличить переменную, нужно 2 раза укачать её в строке:</p>
<div class='code'><pre><code class='language-python'>x = 10

x = x + 30</code></pre></div>
<p>В Python есть сокращенная конструкция, чтобы делать подобные операции:</p>
<div class='code'><pre><code class='language-python'>x = 10

x += 30 # то же самое, что x = x + 30
x -= 5 # то же самое, что x = x - 5
x *= 2 # то же самое, что x = x * 2
x /= 10 # то же самое, что x = x / 10
x //= 3 # то же самое, что x = x // 3
x **= 3 # то же самое, что x = x**3</code></pre></div>
